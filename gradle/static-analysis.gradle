/*
 * static-analysis.gradle
 * Copyright (c) 2021
 * Authors: Ionut Damian, Michael Dietz, Frank Gaibler, Daniel Langerenken, Simon Flutura,
 * Vitalijs Krumins, Antonio Grieco
 * *****************************************************
 * This file is part of the Social Signal Interpretation for Java (SSJ) framework
 * developed at the Lab for Human Centered Multimedia of the University of Augsburg.
 *
 * SSJ has been inspired by the SSI (http://openssi.net) framework. SSJ is not a
 * one-to-one port of SSI to Java, it is an approximation. Nor does SSJ pretend
 * to offer SSI's comprehensive functionality and performance (this is java after all).
 * Nevertheless, SSJ borrows a lot of programming patterns from SSI.
 *
 * This library is free software; you can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation; either version 3 of the License, or any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this library; if not, see <http://www.gnu.org/licenses/>.
 */

apply plugin: 'com.novoda.static-analysis'
// Gradle 6.0 or greater: apply plugin: 'com.github.spotbugs'

staticAnalysis {
    penalty failFast
    checkstyle {
        toolVersion '8.8'
        exclude project.fileTree('src/test/java')
        exclude project.fileTree('src/androidTest/java')
        configFile rootProject.file('gradle/tools/checkstyle.xml')
        includeVariants { variant -> variant.name.contains('debug') }
    }
    pmd {
        toolVersion '6.3.0'
        exclude project.fileTree('src/test/java')
        exclude project.fileTree('src/androidTest/java')
        ruleSetFiles = rootProject.files('gradle/tools/pmd.xml')
        includeVariants { variant -> variant.name.contains('debug') }
    }
    findbugs {
        exclude project.fileTree('src/test/java')
        exclude project.fileTree('src/androidTest/java')
        excludeFilter rootProject.file('gradle/tools/findbugs.xml')
        includeVariants { variant -> variant.name.contains('debug') }
    }
    lintOptions {
        warningsAsErrors true
        checkReleaseBuilds false
        disable 'GradleDependency', 'PluralsCandidate', 'UnusedResources', 'ObsoleteLintCustomCheck',
                'IconDipSize'
    }
}

afterEvaluate {
    assembleDebug.dependsOn 'check'
}