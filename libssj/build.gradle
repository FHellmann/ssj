/*
 * build.gradle
 * Copyright (c) 2018
 * Authors: Ionut Damian, Michael Dietz, Frank Gaibler, Daniel Langerenken, Simon Flutura,
 * Vitalijs Krumins, Antonio Grieco
 * *****************************************************
 * This file is part of the Social Signal Interpretation for Java (SSJ) framework
 * developed at the Lab for Human Centered Multimedia of the University of Augsburg.
 *
 * SSJ has been inspired by the SSI (http://openssi.net) framework. SSJ is not a
 * one-to-one port of SSI to Java, it is an approximation. Nor does SSJ pretend
 * to offer SSI's comprehensive functionality and performance (this is java after all).
 * Nevertheless, SSJ borrows a lot of programming patterns from SSI.
 *
 * This library is free software; you can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation; either version 3 of the License, or any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this library; if not, see <http://www.gnu.org/licenses/>.
 */

apply plugin: 'com.android.library'
apply from: rootProject.file('gradle/version.gradle')

//this will include the mobile MobileSSIConsumer class in the library (requires extra libraries)
def buildSSIXmlPipe = false

ext {
    bintrayRepo = 'maven'
    bintrayName = 'ssj'

    publishedGroupId = 'com.github.hcmlab'
    libraryName = 'ssj'
    artifact = 'libssj'

    libraryDescription = 'Social Signal Processing for Android'

    siteUrl = 'https://github.com/hcmlab/ssj'
    gitUrl = 'https://github.com/hcmlab/ssj.git'

    libraryVersion = getVerName()

    developerId = 'hcmlab'
    developerName = 'Human Centered Multimedia'
    developerEmail = 'ssj@hcm-lab.de'

    licenseName = 'GNU GENERAL PUBLIC LICENSE, Version 3'
    licenseUrl = 'http://www.gnu.org/licenses/gpl.txt'
    allLicenses = ["GPL-3.0"]
}

android {
    compileSdkVersion 28
    buildToolsVersion '28.0.3'

    lintOptions {
        abortOnError false
    }

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 28

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        ndk {
            abiFilters "armeabi-v7a", "x86", "arm64-v8a", "x86_64"
        }

        versionName getVerName()
        versionCode getVerCode()

        printf("\n--------" + "VERSION DATA--------" + "\n" + "- CODE: " + versionCode + "\n" +
                "- NAME: " + versionName + "\n----------------------------\n")

//        externalNativeBuild {
//            cmake {
//                arguments  "-DANDROID_TOOLCHAIN=gcc"
//                cppFlags "-std=c++11 -frtti -fexceptions"
//            }
//        }
//
//        ndk {
//            // Specifies the ABI configurations of your native
//            // libraries Gradle should build and package with your APK.
//            abiFilters  'armeabi-v7a', 'x86'
//        }
    }
    buildTypes {
        debug {
            testCoverageEnabled true
        }
        release {
            minifyEnabled false
        }
    }
    compileOptions {
        encoding "UTF-8"
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
//    externalNativeBuild {
//        cmake {
//            path "D:\\Workspaces\\SSI\\mobileSSI\\mobileSSI-android-studio\\app\\mobileSSI\\CMakeLists.txt"
//        }
//    }
    testOptions {
        animationsDisabled true

        unitTests {
            includeAndroidResources = true
        }
    }
    sourceSets {
        main {
            java {
                if (!buildSSIXmlPipe) {
                    exclude '**/MobileSSIConsumer.java'
                }
            }
        }
        androidTest {
            java {
                if (!buildSSIXmlPipe) {
                    exclude '**/SSIXmlPipeTest.java'
                }
            }
        }
    }
}

// set permissions for unit tests
def adb = android.getAdbExe().toString()
def recipient = "hcm.ssj.test"

tasks.register("grantPermissions") {
    doLast {
        "${adb} devices".execute().text.eachLine {
            if (it.endsWith("device")) {
                def device = it.split()[0]
                println "Granting permissions on device: ${device}"
                "${adb} -s ${device} shell pm grant ${recipient} android.permission.RECORD_AUDIO".execute()
                "${adb} -s ${device} shell pm grant ${recipient} android.permission.WRITE_EXTERNAL_STORAGE".execute()
                "${adb} -s ${device} shell pm grant ${recipient} android.permission.READ_EXTERNAL_STORAGE".execute()
                "${adb} -s ${device} shell pm grant ${recipient} android.permission.CAMERA".execute()
                "${adb} -s ${device} shell pm grant ${recipient} android.permission.INTERNET".execute()
                "${adb} -s ${device} shell pm grant ${recipient} android.permission.WAKE_LOCK".execute()
                "${adb} -s ${device} shell pm grant ${recipient} android.permission.ACCESS_FINE_LOCATION".execute()
                "${adb} -s ${device} shell pm grant ${recipient} android.permission.ACCESS_COARSE_LOCATION".execute()
                "${adb} -s ${device} shell pm grant ${recipient} android.permission.BODY_SENSORS".execute()
                "${adb} -s ${device} shell pm grant ${recipient} android.permission.BLUETOOTH".execute()
                "${adb} -s ${device} shell pm grant ${recipient} android.permission.BLUETOOTH_ADMIN".execute()
                "${adb} -s ${device} shell pm grant ${recipient} com.microsoft.band.service.access.BIND_BAND_SERVICE".execute()
                "${adb} -s ${device} shell pm grant ${recipient} android.permission.ACCESS_WIFI_STATE".execute()
            }
        }
    }
}
grantPermissions.description = "Grants permissions for Marshmallow"

tasks.whenTaskAdded { theTask ->
    def assemblePattern = ~"assembleDebugAndroidTest"
    if (assemblePattern.matcher(theTask.name).matches()) {
        theTask.dependsOn grantPermissions
    }
}

dependencies {
    testImplementation 'junit:junit:4.13.1'
    testImplementation 'androidx.test:core:1.3.0'
    testImplementation 'androidx.annotation:annotation:1.1.0'
    testImplementation 'androidx.test:rules:1.3.0'
    testImplementation 'org.mockito:mockito-core:2.7.6'
    testImplementation 'org.mockito:mockito-android:2.7.6'
    androidTestImplementation 'androidx.test:runner:1.3.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.ext:truth:1.3.0'
    androidTestImplementation 'com.google.truth:truth:1.0'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'

    //api 'org.tensorflow:tensorflow-lite:2.3.0'
    //api 'org.tensorflow:tensorflow-lite-gpu:2.3.0'

    // ReactiveX & Streams
    implementation 'com.github.pwittchen:reactivesensors-rx3:0.4.4'
    implementation 'io.reactivex.rxjava3:rxandroid:3.0.0'
    implementation 'io.reactivex.rxjava3:rxjava:3.0.7'
    implementation 'com.github.akarnokd:rxjava3-bridge:3.0.0'
    implementation 'com.annimon:stream:1.2.1'
    // Third-Party Libs
    implementation 'com.jakewharton.timber:timber:4.7.1'
    // implementation 'org.apache.commons:commons-lang3:3.11'
    implementation 'org.apache.commons:commons-math3:3.6.1'

    api fileTree(dir: 'libs', include: ['*.jar'])
}

apply from: rootProject.file('gradle/static-analysis.gradle')
apply from: rootProject.file('gradle/coverage-submodule.gradle')
apply from: rootProject.file('gradle/test-logging.gradle')
//upload to library bintray
apply from: rootProject.file('gradle/installv1.gradle')
apply from: rootProject.file('gradle/bintrayv1.gradle')